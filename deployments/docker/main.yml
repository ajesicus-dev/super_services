version: '3.9'

networks:
  super_services_network:
    driver: bridge

include:
  - docker-compose-base.yml
  - docker-compose-vault.yml
    
volumes:
  postgres_data:
  mongodb_data:
  redis_data:

services:
  gateway:
    build:
      context: ./cmd/gateway
    ports:
      - "8080:8080"
    environment:
      - JWT_SECRET=your_jwt_secret
      - VAULT_ADDR=http://vault:8200  # <- Add Vault address if needed
    depends_on:
      vault: 
        condition: service_healthy
      auth:
        condition: service_healthy
      user:
        condition: service_healthy
      notification:
        condition: service_healthy
      billing:
        condition: service_healthy
      search:
        condition: service_healthy
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth:
    build:
      context: ./cmd/auth
    environment:
      - VAULT_ENABLED=true
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=root
      - KEYCLOAK_URL=http://keycloak:8080
      - REALM=mono-services      
    depends_on:
      keycloak:
        condition: service_healthy
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user:
    build:
      context: ./cmd/user
    depends_on:
      - postgres
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification:
    build:
      context: ./cmd/notification
    depends_on:
      - nats
      - redis
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  audit:
    build:
      context: ./cmd/audit
    depends_on:
      - postgres
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin:
    build:
      context: ./cmd/admin
    depends_on:
      - postgres
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  billing:
    build:
      context: ./cmd/billing
    depends_on:
      - postgres
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  search:
    build:
      context: ./cmd/search
    depends_on:
      - elasticsearch
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
    ports:
      - "8081:8080"
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/auth/realms/master"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:6
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nats:
    image: nats:2.9
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./deployments/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - super_services_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
